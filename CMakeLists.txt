cmake_minimum_required(VERSION 2.8)
project(IOFSL_SHIPPER C)

#------------------------------------------------------------------------------
# Version information 
#------------------------------------------------------------------------------
set(IOFSL_SHIPPER_VERSION_MAJOR "0")
set(IOFSL_SHIPPER_VERSION_MINOR "0")
set(IOFSL_SHIPPER_VERSION_PATCH "1")
set(IOFSL_SHIPPER_PACKAGE "iofsl_shipper")
set(IOFSL_SHIPPER_PACKAGE_NAME "IOFSL_SHIPPER")
set(IOFSL_SHIPPER_PACKAGE_VERSION "${IOFSL_SHIPPER_VERSION_MAJOR}.${IOFSL_SHIPPER_VERSION_MINOR}.${IOFSL_SHIPPER_VERSION_PATCH}")
set(IOFSL_SHIPPER_PACKAGE_VERSION_MAJOR "${IOFSL_SHIPPER_VERSION_MAJOR}.${IOFSL_SHIPPER_VERSION_MINOR}")
set(IOFSL_SHIPPER_PACKAGE_VERSION_MINOR "${IOFSL_SHIPPER_VERSION_PATCH}")
set(IOFSL_SHIPPER_PACKAGE_STRING "${IOFSL_SHIPPER_PACKAGE_NAME} ${IOFSL_SHIPPER_PACKAGE_VERSION}")
set(IOFSL_SHIPPER_PACKAGE_TARNAME "${IOFSL_SHIPPER_PACKAGE}")

#------------------------------------------------------------------------------
# Setup install and output Directories
#------------------------------------------------------------------------------
if(NOT IOFSL_SHIPPER_INSTALL_BIN_DIR)
  set(IOFSL_SHIPPER_INSTALL_BIN_DIR bin)
endif(NOT IOFSL_SHIPPER_INSTALL_BIN_DIR)
if(NOT IOFSL_SHIPPER_INSTALL_LIB_DIR)
  set(IOFSL_SHIPPER_INSTALL_LIB_DIR lib)
endif(NOT IOFSL_SHIPPER_INSTALL_LIB_DIR)
if(NOT IOFSL_SHIPPER_INSTALL_INCLUDE_DIR)
  set(IOFSL_SHIPPER_INSTALL_INCLUDE_DIR ${CMAKE_INSTALL_PREFIX}/include)
endif(NOT IOFSL_SHIPPER_INSTALL_INCLUDE_DIR)
if(NOT IOFSL_SHIPPER_INSTALL_DATA_DIR)
  set(IOFSL_SHIPPER_INSTALL_DATA_DIR share)
endif(NOT IOFSL_SHIPPER_INSTALL_DATA_DIR)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY
    ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all Executables."
)
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY
    ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all Libraries"
)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY
    ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all static libraries."
)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${IOFSL_SHIPPER_SOURCE_DIR}/CMake)

#------------------------------------------------------------------------------
# Choose static or shared libraries.
#------------------------------------------------------------------------------
option(BUILD_SHARED_LIBS "Build with shared libraries." OFF)

# Set unique var used in the autogenerated config file (symbol import/export)
if(BUILD_SHARED_LIBS)
  set(IOFSL_SHIPPER_BUILD_SHARED_LIBS 1)
  set(IOFSL_SHIPPER_LIBTYPE SHARED)
else(BUILD_SHARED_LIBS)
  set(IOFSL_SHIPPER_BUILD_SHARED_LIBS 0)
  set(IOFSL_SHIPPER_LIBTYPE STATIC)
endif(BUILD_SHARED_LIBS)

#------------------------------------------------------------------------------
# Check headers / symbols / sizes
#------------------------------------------------------------------------------
include(CheckTypeSize)
check_type_size(size_t SIZEOF_SIZE_T)
check_type_size(int64_t SIZEOF_INT64_T)
check_type_size(uint8_t SIZEOF_UINT8_T)

include(CheckIncludeFile)
check_include_file("execinfo.h" HAVE_EXECINFO_H)

include(CheckLibraryExists)
check_library_exists(glib-2.0 g_atomic_int_set "" HAVE_GLIB)
check_library_exists(pthread pthread_create "" HAVE_LIBPTHREAD)
include(FindThreads)

#------------------------------------------------------------------------------
# External dependencies
#------------------------------------------------------------------------------

# BMI
option(IOFSL_SHIPPER_USE_BMI "Use BMI." OFF)
if(IOFSL_SHIPPER_USE_BMI)
  find_package(BMI REQUIRED)
  if(BMI_FOUND)
    set(IOFSL_SHIPPER_HAS_BMI 1)
    include_directories(${BMI_INCLUDE_DIR})
    set(IOFSL_SHIPPER_EXT_DEPENCIES
      ${IOFSL_SHIPPER_EXT_DEPENCIES}
      ${BMI_LIBRARIES}
    )
    include(CheckCSourceCompiles)
    set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} ${BMI_LIBRARIES})
    set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} ${BMI_INCLUDE_DIR})
    check_c_source_compiles("#include <bmi.h>
      int main(int argc, char **argv) {
        BMI_set_info(0,BMI_ZOID_POST_TIMEOUT,0);
      }
     " HAVE_BMI_ZOID_TIMEOUT)
  endif(BMI_FOUND)
endif(IOFSL_SHIPPER_USE_BMI)

# MPI
option(IOFSL_SHIPPER_USE_MPI "Use MPI." OFF)
if(IOFSL_SHIPPER_USE_MPI)
  find_package(MPI)
  if(MPI_FOUND)
    set(IOFSL_SHIPPER_HAS_MPI 1)
    include_directories(${MPI_INCLUDE_PATH})
    set(IOFSL_SHIPPER_EXT_DEPENCIES
      ${IOFSL_SHIPPER_EXT_DEPENCIES}
      ${MPI_LIBRARIES}
    )
  # we may want to add an option for MPI_VERSION >= 3
  endif(MPI_FOUND)
endif(IOFSL_SHIPPER_USE_MPI)

# Boost (for preprocessor macros)
option(IOFSL_SHIPPER_USE_BOOST_PP "Use BOOST preprocessor macros." OFF)
if(IOFSL_SHIPPER_USE_BOOST_PP)
  find_package(Boost 1.50)
  if(Boost_FOUND)
    set(IOFSL_SHIPPER_HAS_BOOST 1)
    include_directories(${Boost_INCLUDE_DIRS})
#    add_definitions(-DBOOST_PP_VARIADICS=1)
  endif(Boost_FOUND)
endif(IOFSL_SHIPPER_USE_BOOST_PP)

# XDR
option(IOFSL_SHIPPER_USE_XDR "Use XDR for generic encoding." OFF)
if(IOFSL_SHIPPER_USE_XDR)
  set(IOFSL_SHIPPER_HAS_XDR 1)
endif(IOFSL_SHIPPER_USE_XDR)

#------------------------------------------------------------------------------
# Configure module header files
#------------------------------------------------------------------------------
configure_file(
  ${CMAKE_SOURCE_DIR}/CMake/shipper_config.h.in
  ${IOFSL_SHIPPER_BINARY_DIR}/src/shipper_config.h
)

#------------------------------------------------------------------------------
# Set sources
#------------------------------------------------------------------------------
include_directories(
  ${IOFSL_SHIPPER_SOURCE_DIR}
  ${IOFSL_SHIPPER_SOURCE_DIR}/src
  ${IOFSL_SHIPPER_SOURCE_DIR}/src/util
  ${IOFSL_SHIPPER_BINARY_DIR}
  ${IOFSL_SHIPPER_BINARY_DIR}/src
)

set(IOFSL_SHIPPER_UTIL_SRCS
  src/util/hash-table.c
)

set(IOFSL_SHIPPER_NA_SRCS
  src/network_abstraction.c
  src/mem_handle_map.c
)

if(BMI_FOUND)
  set(IOFSL_SHIPPER_NA_SRCS
    ${IOFSL_SHIPPER_NA_SRCS}
    src/network_bmi.c
  )
endif(BMI_FOUND)

if(MPI_FOUND)
  set(IOFSL_SHIPPER_NA_SRCS
    ${IOFSL_SHIPPER_NA_SRCS}
    src/network_mpi.c
  )
endif(MPI_FOUND)

set(IOFSL_SHIPPER_BDS_SRCS
  src/bulk_data_shipper.c
)

set(IOFSL_SHIPPER_FS_SRCS
  src/function_shipper.c
  src/function_map.c
  src/generic_proc.c
)

set(IOFSL_COMPAT_SRCS
  src/iofsl_compat.c
)
if(APPLE)
  set(IOFSL_COMPAT_SRCS ${IOFSL_COMPAT_SRCS} src/util/xdr_sizeof.c)
endif(APPLE)

#------------------------------------------------------------------------------
# Set sources
#------------------------------------------------------------------------------
add_library(iofsl_shipper_na ${IOFSL_SHIPPER_NA_SRCS} ${IOFSL_SHIPPER_UTIL_SRCS})
target_link_libraries(iofsl_shipper_na ${IOFSL_SHIPPER_EXT_DEPENCIES})

add_library(iofsl_shipper_bds ${IOFSL_SHIPPER_BDS_SRCS})
target_link_libraries(iofsl_shipper_bds iofsl_shipper_na ${IOFSL_SHIPPER_EXT_DEPENCIES})

add_library(iofsl_shipper_fs ${IOFSL_SHIPPER_FS_SRCS} ${IOFSL_COMPAT_SRCS})
target_link_libraries(iofsl_shipper_fs iofsl_shipper_na ${IOFSL_SHIPPER_EXT_DEPENCIES})

#-----------------------------------------------------------------------------
# Testing
#-----------------------------------------------------------------------------
option(BUILD_TESTING "Build testing." OFF)
if(BUILD_TESTING)
  enable_testing()
#  include(CTest)
  add_subdirectory(test)
endif(BUILD_TESTING)


# TODO INSTALL RULES
