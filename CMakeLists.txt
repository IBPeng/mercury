cmake_minimum_required(VERSION 2.8)
project(MERCURY C)

#------------------------------------------------------------------------------
# Version information 
#------------------------------------------------------------------------------
set(MERCURY_VERSION_MAJOR "0")
set(MERCURY_VERSION_MINOR "7")
set(MERCURY_VERSION_PATCH "0")
set(MERCURY_PACKAGE "mercury")
set(MERCURY_PACKAGE_NAME "MERCURY")
set(MERCURY_PACKAGE_VERSION "${MERCURY_VERSION_MAJOR}.${MERCURY_VERSION_MINOR}.${MERCURY_VERSION_PATCH}")
set(MERCURY_PACKAGE_VERSION_MAJOR "${MERCURY_VERSION_MAJOR}.${MERCURY_VERSION_MINOR}")
set(MERCURY_PACKAGE_VERSION_MINOR "${MERCURY_VERSION_PATCH}")
set(MERCURY_PACKAGE_STRING "${MERCURY_PACKAGE_NAME} ${MERCURY_PACKAGE_VERSION}")
set(MERCURY_PACKAGE_TARNAME "${MERCURY_PACKAGE}")

#------------------------------------------------------------------------------
# Setup install and output Directories
#------------------------------------------------------------------------------
if(NOT MERCURY_INSTALL_BIN_DIR)
  set(MERCURY_INSTALL_BIN_DIR ${CMAKE_INSTALL_PREFIX}/bin)
endif(NOT MERCURY_INSTALL_BIN_DIR)
if(NOT MERCURY_INSTALL_LIB_DIR)
  set(MERCURY_INSTALL_LIB_DIR ${CMAKE_INSTALL_PREFIX}/lib)
endif(NOT MERCURY_INSTALL_LIB_DIR)
if(NOT MERCURY_INSTALL_INCLUDE_DIR)
  set(MERCURY_INSTALL_INCLUDE_DIR ${CMAKE_INSTALL_PREFIX}/include)
endif(NOT MERCURY_INSTALL_INCLUDE_DIR)
if(NOT MERCURY_INSTALL_DATA_DIR)
  set(MERCURY_INSTALL_DATA_DIR ${CMAKE_INSTALL_PREFIX}/share)
endif(NOT MERCURY_INSTALL_DATA_DIR)

if(NOT MERCURY_EXTERNALLY_CONFIGURED)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY
      ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all Executables."
  )
  set(EXECUTABLE_OUTPUT_PATH ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY
      ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all Libraries"
  )
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY
      ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all static libraries."
  )
  set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${MERCURY_SOURCE_DIR}/CMake)
endif(NOT MERCURY_EXTERNALLY_CONFIGURED)

#------------------------------------------------------------------------------
# Default build type
#------------------------------------------------------------------------------
if(NOT CMAKE_BUILD_TYPE)
  message(STATUS "No build type selected, default to Release")
  set(CMAKE_BUILD_TYPE "Release")
endif()

#-----------------------------------------------------------------------------
# Targets built within this project are exported at Install time for use
# by other projects.
#-----------------------------------------------------------------------------
if(NOT MERCURY_EXPORTED_TARGETS)
  set(MERCURY_EXPORTED_TARGETS "mercury-targets")
endif(NOT MERCURY_EXPORTED_TARGETS)

#------------------------------------------------------------------------------
# Choose static or shared libraries.
#------------------------------------------------------------------------------
option(BUILD_SHARED_LIBS "Build with shared libraries." OFF)

# Set unique var used in the autogenerated config file (symbol import/export)
if(BUILD_SHARED_LIBS)
  set(MERCURY_BUILD_SHARED_LIBS 1)
  set(MERCURY_LIBTYPE SHARED)
else(BUILD_SHARED_LIBS)
  set(MERCURY_BUILD_SHARED_LIBS 0)
  set(MERCURY_LIBTYPE STATIC)
endif(BUILD_SHARED_LIBS)

#-------------------------------------------------------------------------------
macro(set_lib_options libtarget libname libtype)
  if(${libtype} MATCHES "SHARED")
    if(WIN32 AND NOT MINGW)
      set(LIB_RELEASE_NAME "${libname}")
      set(LIB_DEBUG_NAME "${libname}_D")
      set(LIB_VERSION ${MERCURY_PACKAGE_VERSION_MAJOR})
    else(WIN32 AND NOT MINGW)
      set(LIB_RELEASE_NAME "${libname}")
      set(LIB_DEBUG_NAME "${libname}_debug")
      set(LIB_VERSION ${MERCURY_PACKAGE_VERSION})
    endif(WIN32 AND NOT MINGW)
  else(${libtype} MATCHES "SHARED")
    if(WIN32 AND NOT MINGW)
      set(LIB_RELEASE_NAME "lib${libname}")
      set(LIB_DEBUG_NAME "lib${libname}_D")
    else(WIN32 AND NOT MINGW)
      # if the generator supports configuration types or if the CMAKE_BUILD_TYPE has a value
      if(CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
        set(LIB_RELEASE_NAME "${libname}")
        set(LIB_DEBUG_NAME "${libname}_debug")
      else(CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
        set(LIB_RELEASE_NAME "lib${libname}")
        set(LIB_DEBUG_NAME "lib${libname}_debug")
      endif(CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
    endif(WIN32 AND NOT MINGW)
  endif(${libtype} MATCHES "SHARED")

  set_target_properties(${libtarget}
      PROPERTIES
      DEBUG_OUTPUT_NAME          ${LIB_DEBUG_NAME}
      RELEASE_OUTPUT_NAME        ${LIB_RELEASE_NAME}
      MINSIZEREL_OUTPUT_NAME     ${LIB_RELEASE_NAME}
      RELWITHDEBINFO_OUTPUT_NAME ${LIB_RELEASE_NAME}
      VERSION                    ${LIB_VERSION}
      SOVERSION                  ${LIB_VERSION}
  )

  #----- Use MSVC Naming conventions for Shared Libraries
  if(MINGW AND ${libtype} MATCHES "SHARED")
    set_target_properties(${libtarget}
        PROPERTIES
        IMPORT_SUFFIX ".lib"
        IMPORT_PREFIX ""
        PREFIX ""
    )
  endif(MINGW AND ${libtype} MATCHES "SHARED")
endmacro(set_lib_options)

#-----------------------------------------------------------------------------
# Coverage
#-----------------------------------------------------------------------------
option(MERCURY_ENABLE_COVERAGE "Enable coverage." OFF)
if(MERCURY_ENABLE_COVERAGE)
  set(COVERAGE_FLAGS "-fprofile-arcs -ftest-coverage" CACHE STRING
    "Flags to the coverage program that CTest uses to perform coverage inspection"
  )
  mark_as_advanced(COVERAGE_FLAGS)
endif(MERCURY_ENABLE_COVERAGE)

macro(set_coverage_flags target)
  set_target_properties(${target}
    PROPERTIES
      COMPILE_FLAGS ${COVERAGE_FLAGS}
      LINK_FLAGS ${COVERAGE_FLAGS}
  )
endmacro(set_coverage_flags)

#-----------------------------------------------------------------------------
# Source
#-----------------------------------------------------------------------------
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src)

#-----------------------------------------------------------------------------
# Testing
#-----------------------------------------------------------------------------
option(BUILD_TESTING "Build testing." OFF)
if(NOT MERCURY_EXTERNALLY_CONFIGURED AND BUILD_TESTING)
  enable_testing()
  include(CTest)
  add_subdirectory(Testing)
endif(NOT MERCURY_EXTERNALLY_CONFIGURED AND BUILD_TESTING)

#-----------------------------------------------------------------------------
# Configure the config.cmake file for the build directory
#-----------------------------------------------------------------------------
configure_file(
  ${MERCURY_SOURCE_DIR}/CMake/mercury-config.cmake.build.in
  ${MERCURY_BINARY_DIR}/mercury-config.cmake @ONLY
)

#-----------------------------------------------------------------------------
# Configure the config.cmake file for the install directory
#-----------------------------------------------------------------------------
configure_file(
  ${MERCURY_SOURCE_DIR}/CMake/mercury-config.cmake.install.in
  ${MERCURY_BINARY_DIR}/CMakeFiles/mercury-config.cmake @ONLY
)

install(
  FILES
    ${MERCURY_BINARY_DIR}/CMakeFiles/mercury-config.cmake
  DESTINATION
    ${MERCURY_INSTALL_DATA_DIR}/cmake/mercury
)

#-----------------------------------------------------------------------------
# Configure the hdf5-config-version .cmake file for the install directory
#-----------------------------------------------------------------------------
configure_file(
  ${MERCURY_SOURCE_DIR}/CMake/mercury-config-version.cmake.in
  ${MERCURY_BINARY_DIR}/CMakeFiles/mercury-config-version.cmake @ONLY
)

install(
  FILES
    ${MERCURY_BINARY_DIR}/CMakeFiles/mercury-config-version.cmake
  DESTINATION
    ${MERCURY_INSTALL_DATA_DIR}/cmake/mercury
)

#-----------------------------------------------------------------------------
# For automake compatibility, also a provide a pkgconfig file
#-----------------------------------------------------------------------------
configure_file(
  ${MERCURY_SOURCE_DIR}/CMake/mercury.pc.in
  ${MERCURY_BINARY_DIR}/CMakeFiles/mercury.pc @ONLY
)

install(
  FILES
    ${MERCURY_BINARY_DIR}/CMakeFiles/mercury.pc
  DESTINATION
    ${MERCURY_INSTALL_DATA_DIR}/pkgconfig
)

#-----------------------------------------------------------------------------
# CPack
#-----------------------------------------------------------------------------
set(CPACK_PACKAGE_DESCRIPTION_FILE ${MERCURY_SOURCE_DIR}/README)
set(CPACK_RESOURCE_FILE_LICENSE ${MERCURY_SOURCE_DIR}/COPYING)
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "The Function Shipper for I/O Forwarding")
set(CPACK_PACKAGE_NAME "Mercury")
set(CPACK_PACKAGE_VENDOR "Argonne National Laboratories / The HDF Group")
set(CPACK_PACKAGE_VERSION_MAJOR ${MERCURY_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${MERCURY_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${MERCURY_VERSION_PATCH})
set(CPACK_GENERATOR "TBZ2")
set(CPACK_SOURCE_PACKAGE_FILE_NAME ${MERCURY_PACKAGE_TARNAME}-${MERCURY_PACKAGE_VERSION})
set(CPACK_SOURCE_IGNORE_FILES ".git*;/GitSetup/;/.git/;.swp$;.#;/#;.*~")
set(CPACK_SOURCE_STRIP_FILES "")
include(CPack)
